{
	"info": {
		"_postman_id": "8038e92c-ba81-4ab2-b454-847c9ccf9756",
		"name": "Desafio API - Parte 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44202516",
		"_collection_link": "https://thaysmelo-7456056.postman.co/workspace/Thays-Melo's-Workspace~1044ce85-8aaa-4f01-8acd-6a9267b881b6/collection/44202516-8038e92c-ba81-4ab2-b454-847c9ccf9756?action=share&source=collection_link&creator=44202516"
	},
	"item": [
		{
			"name": "criarUsuario",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Função gerar um nome aleatório",
							"function gerarNomeUsuario() {",
							"    const letras = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    let nomeUsuario = 'Usuário ';",
							"    for (let i = 0; i < 6; i++) {",
							"        nomeUsuario += letras.charAt(Math.floor(Math.random() * letras.length));",
							"    }",
							"    return nomeUsuario;",
							"}",
							"",
							"// Função gerar uma senha aleatória",
							"function gerarSenhaAleatoria() {",
							"    const letras = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';",
							"    const numeros = '0123456789';",
							"    const caractere_especial = '!@#$%';",
							"    let senha = '';",
							"    for (let i = 0; i < 6; i++) {",
							"        senha += letras.charAt(Math.floor(Math.random() * letras.length));",
							"    }",
							"    senha += numeros.charAt(Math.floor(Math.random() * numeros.length));",
							"    senha += caractere_especial.charAt(Math.floor(Math.random() * caractere_especial.length));",
							"    return senha;",
							"}",
							"",
							"// Criando uma senha",
							"const senhaAleatoria = gerarSenhaAleatoria();",
							"const nomeAleatorio = gerarNomeUsuario();",
							"",
							"// Armazenando em variável de ambiente",
							"pm.environment.set(\"password\", senhaAleatoria);",
							"pm.environment.set(\"nomeUsuario\", nomeAleatorio);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resposta = pm.response.json();",
							"var nomeUsuario = pm.environment.get(\"nomeUsuario\");",
							"",
							"// Salva o userID no ambiente",
							"pm.environment.set(\"userID\", resposta.userID); ",
							"",
							"// Testes",
							"pm.test(\"Validar Código de Resposta == 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Validar se o json possui os campos userID, username, e books\", function () {    ",
							"    pm.expect(resposta).to.be.an('object');",
							"    pm.expect(resposta.userID).to.exist;",
							"    pm.expect(resposta.username).to.exist;",
							"    pm.expect(resposta.books).to.exist;",
							"});",
							"",
							"pm.test(\"Validar nome do usuário\", function () {",
							"  pm.expect(resposta.username).equals(nomeUsuario);",
							"});",
							"",
							"pm.test(\"Validar se o campo de livro está vazio\", function () {",
							"    pm.expect(resposta.books).to.exist.and.to.be.an('array').that.is.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"{{nomeUsuario}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlUsuario}}/User",
					"host": [
						"{{urlUsuario}}"
					],
					"path": [
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "gerarTokenAcesso",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resposta = pm.response.json();",
							"",
							"pm.environment.set(\"token\", resposta.token);",
							"",
							"",
							"// Testes",
							"pm.test(\"Validar Código de Resposta == 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validar se o json possui os campos token, expires, status e result\", function () {    ",
							"    pm.expect(resposta).to.be.an('object');",
							"    pm.expect(resposta.token).to.exist;",
							"    pm.expect(resposta.expires).to.exist;",
							"    pm.expect(resposta.status).to.exist;",
							"    pm.expect(resposta.result).to.exist;",
							"});",
							"",
							"pm.test(\"Validar se o status é 'Success'\", function () {",
							"    pm.expect(resposta.status).to.eql('Success');",
							"});",
							"",
							"pm.test(\"Validar se o result é 'User authorized successfully.'\", function () {",
							"    pm.expect(resposta.result).to.eql('User authorized successfully.');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"{{nomeUsuario}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlUsuario}}/GenerateToken",
					"host": [
						"{{urlUsuario}}"
					],
					"path": [
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "confirmarUsuarioAutorizado",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resposta = pm.response.json();",
							"",
							"",
							"// Testes",
							"pm.test(\"Validar Código de Resposta == 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Validar se o retorno é true', function () {",
							"    pm.expect(resposta).to.eql(true);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"{{nomeUsuario}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlUsuario}}/Authorized",
					"host": [
						"{{urlUsuario}}"
					],
					"path": [
						"Authorized"
					]
				}
			},
			"response": []
		},
		{
			"name": "listarLivros",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resposta = pm.response.json();",
							"",
							"pm.environment.set('livroUm', resposta.books[0].isbn);",
							"pm.environment.set('livroDois', resposta.books[1].isbn);",
							"",
							"// Testes",
							"pm.test(\"Validar Código de Resposta == 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validar se o json possui os campos isbn, title, subTitle, author, publish_date, publisher, pages, description e website\", function () {    ",
							"    pm.expect(resposta).to.be.an('object');",
							"    pm.expect(resposta.books[0].isbn).to.exist.and.to.be.a('string');",
							"    pm.expect(resposta.books[0].title).to.exist.and.to.be.string;",
							"    pm.expect(resposta.books[0].subTitle).to.exist.to.be.string;",
							"    pm.expect(resposta.books[0].author).to.exist.to.be.string;",
							"    pm.expect(resposta.books[0].publish_date).to.exist.to.be.string;",
							"    pm.expect(resposta.books[0].publisher).to.exist;",
							"    pm.expect(resposta.books[0].pages).to.exist;",
							"    pm.expect(resposta.books[0].description).to.exist.to.be.string;",
							"    pm.expect(resposta.books[0].website).to.exist.to.be.string;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlLivros}}/Books",
					"host": [
						"{{urlLivros}}"
					],
					"path": [
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "alugarLivros",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resposta = pm.response.json();",
							"",
							"pm.environment.set('livroUm', resposta.books[0].isbn);",
							"pm.environment.set('livroDois', resposta.books[1].isbn);",
							"",
							"// Testes",
							"pm.test(\"Validar Código de Resposta == 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Validar se o json possui isbn\", function () {    ",
							"    pm.expect(resposta).to.be.an('object');",
							"    pm.expect(resposta.books[0].isbn).to.exist.and.to.be.a('string');",
							"    pm.expect(resposta.books[1].isbn).to.exist.and.to.be.a('string');",
							"",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userID}}\",\n  \"collectionOfIsbns\": [\n    {\"isbn\": \"{{livroUm}}\"},\n    {\"isbn\": \"{{livroDois}}\"}\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{urlLivros}}/Books",
					"host": [
						"{{urlLivros}}"
					],
					"path": [
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "listarDetalheUsuario",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resposta = pm.response.json();",
							"",
							"var nomeUsuario = pm.environment.get(\"nomeUsuario\");",
							"var userID = pm.environment.get(\"userID\");",
							"",
							"// Testes",
							"pm.test(\"Validar Código de Resposta == 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validar se o ID do usuário está correto\", function () {",
							"    pm.expect(resposta.userId).to.eql(userID);",
							"})",
							"",
							"pm.test(\"Validar se o usuário está correto\", function () {",
							"    pm.expect(resposta.username).to.eql(nomeUsuario);",
							"})",
							"",
							"pm.test(\"Validar o usuário possui livros\", function () {    ",
							"    pm.expect(resposta.books[0].isbn).to.exist;",
							"    pm.expect(resposta.books[1].isbn).to.exist;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{urlUsuario}}/User/{{userID}}",
					"host": [
						"{{urlUsuario}}"
					],
					"path": [
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		}
	]
}